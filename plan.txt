# Expense Tracker Implementation Plan
## Learning-Focused, Parallel Development Approach

### PROJECT OVERVIEW
- **Goal**: Build a full-stack expense tracker with category insights
- **Tech Stack**: Spring Boot + React + PostgreSQL + JWT
- **Approach**: Parallel frontend/backend development for immediate testing
- **Database**: Railway PostgreSQL (free tier)
- **Deployment**: Railway (backend) + Vercel (frontend)

### PHASE 1: FOUNDATION SETUP
**Goal**: Get both backend and frontend running locally

#### Step 1.1: Database Setup
- Set up Railway PostgreSQL (free tier)
- Get connection details
- Test connection

#### Step 1.2: Backend Foundation
- Create Spring Boot project with Maven
- Add dependencies (Web, JPA, Security, PostgreSQL)
- Configure application.properties
- Create basic project structure

#### Step 1.3: Frontend Foundation
- Create React app with Vite
- Install basic dependencies (Axios, React Router)
- Set up project structure
- Create basic layout components

**Outcome**: Both projects running locally, connected to database

### PHASE 2: BASIC AUTHENTICATION
**Goal**: Simple login/register functionality

#### Step 2.1: Backend Auth
- Create User entity and repository
- Implement JWT authentication
- Create auth endpoints (register, login)

#### Step 2.2: Frontend Auth
- Create login/register forms
- Implement authentication state management
- Add protected routes

**Outcome**: Users can register and login on both ends

### PHASE 3: BASIC CRUD
**Goal**: Simple transaction management

#### Step 3.1: Backend CRUD
- Create Transaction entity
- Implement basic CRUD operations
- Create transaction endpoints

#### Step 3.2: Frontend CRUD
- Create transaction form
- Create transaction list/table
- Connect to backend APIs

**Outcome**: Users can add, view, edit, delete transactions

### PHASE 4: ENHANCED FEATURES
**Goal**: Add categories, charts, and polish

#### Step 4.1: Backend Enhancements
- Add Category entity
- Implement category-based filtering
- Add currency conversion (OpenExchangeRates)

#### Step 4.2: Frontend Enhancements
- Add category management
- Implement Chart.js graphs
- Add currency conversion UI
- Improve styling and UX

**Outcome**: Full-featured expense tracker

### PHASE 5: TESTING & DEPLOYMENT
**Goal**: Deploy and test everything

#### Step 5.1: Testing
- Test all features end-to-end
- Fix any bugs
- Optimize performance

#### Step 5.2: Deployment
- Deploy backend to Railway
- Deploy frontend to Vercel
- Test deployed application

**Outcome**: Live, working expense tracker

### PROJECT STRUCTURE
```
trackspring/
├── backend/                 # Spring Boot project
│   ├── src/main/java/
│   │   └── com/trackspring/
│   │       ├── TrackspringApplication.java
│   │       ├── config/      # Security, JWT config
│   │       ├── entity/      # User, Transaction, Category
│   │       ├── repository/  # JPA repositories
│   │       ├── service/     # Business logic
│   │       ├── controller/  # REST endpoints
│   │       └── dto/         # Data transfer objects
│   └── pom.xml
├── frontend/                # React project
│   ├── src/
│   │   ├── components/      # Reusable components
│   │   ├── pages/          # Page components
│   │   ├── services/       # API calls
│   │   ├── context/        # Auth context
│   │   └── utils/          # Helper functions
│   └── package.json
└── README.md
```

### LEARNING GOALS
- Spring Boot REST API development
- JWT authentication
- PostgreSQL with JPA
- React component development
- State management
- API integration
- Chart.js implementation
- Full-stack application development
- Deployment and testing

### REVISED APPROACH
**Strategy**: Frontend-first development with H2 database for rapid iteration
- Start with frontend components and pages for easy testing
- Use H2 in-memory database for development phase
- Migrate to PostgreSQL later when ready for production features

### CURRENT STATUS
- Phase 1: Foundation Setup (COMPLETED)
  - ✅ Backend foundation with Spring Boot + H2
  - ✅ JWT authentication working
  - ✅ User entity and auth endpoints ready
- Phase 2: Frontend Authentication (COMPLETED)
  - ✅ React app with Vite setup
  - ✅ Authentication context and state management
  - ✅ Login and Register pages with form validation
  - ✅ Protected routes and route guards
  - ✅ API service with automatic token handling
  - ✅ Complete authentication flow working
- Phase 3: Transaction CRUD (READY TO START)
  - Next: Create Transaction entity and CRUD operations

### DATABASE STRATEGY
- **Development**: H2 in-memory (current)
- **Production**: PostgreSQL (Neon or Docker) - to be migrated later
- **Migration Point**: After frontend authentication is complete

### COMPREHENSIVE TODO LIST

#### PHASE 2: FRONTEND AUTHENTICATION (CURRENT)
1. **Frontend Auth Setup**
   - Set up React Router, Axios, Auth context
   - Create basic project structure

2. **Authentication Components**
   - Create Login page with form validation
   - Create Register page with form validation
   - Implement authentication context and state management
   - Set up protected routes and route guards
   - Create authentication service for API calls

3. **Dashboard Foundation**
   - Create basic dashboard layout and navigation
   - Test complete authentication flow (register → login → protected access)

#### PHASE 3: TRANSACTION CRUD
4. **Backend Transaction System**
   - Create Transaction entity with proper relationships
   - Create TransactionRepository with custom query methods
   - Implement TransactionService with business logic
   - Create TransactionController with CRUD endpoints
   - Create Transaction DTOs for request/response

5. **Frontend Transaction Management**
   - Create transaction form component (add/edit)
   - Create transaction list/table component with filtering
   - Create transaction service for frontend API calls
   - Test all CRUD operations for transactions

#### PHASE 4: ENHANCED FEATURES
6. **Category Management**
   - Create Category entity and repository
   - Implement category management (CRUD) in backend
   - Create category management UI components
   - Implement category-based filtering and grouping

7. **Visualization & Analytics**
   - Integrate Chart.js for expense visualization
   - Create dashboard with expense charts and summaries
   - Implement currency conversion feature (OpenExchangeRates)

8. **UI/UX Polish**
   - Polish UI/UX with better styling and responsive design

#### PHASE 5: PRODUCTION READINESS
9. **Database Migration**
   - Migrate from H2 to PostgreSQL (Neon or Docker)
   - Update configuration and test migration

10. **Testing & Quality**
    - Comprehensive end-to-end testing of all features
    - Performance optimization and bug fixes

### AUTHENTICATION SYSTEM EXPLANATION

#### How Authentication Works:
1. **Registration/Login**: User credentials sent to backend, JWT token returned
2. **Token Storage**: Frontend stores JWT token in localStorage
3. **Request Authentication**: Every API request includes "Authorization: Bearer <token>" header
4. **Token Validation**: Backend JWT filter validates token on each request
5. **State Management**: React Context manages authentication state globally
6. **Route Protection**: ProtectedRoute component guards authenticated pages

#### Why H2 Database:
- **Development Phase**: Easy setup, no external dependencies
- **H2 Console**: Web interface at http://localhost:8080/h2-console for data inspection
- **Migration Ready**: Will switch to PostgreSQL when ready for production

#### Data Flow:
```
Frontend (React) ←→ Backend (Spring Boot) ←→ H2 Database
     ↓                    ↓                      ↓
localStorage         JWT Validation         User Storage
(Auth State)         (Security Filter)      (In-Memory)
```

### NEXT IMMEDIATE TASKS
1. Create Transaction entity with proper relationships
2. Implement Transaction CRUD operations in backend
3. Create transaction management UI components
4. Test complete transaction flow end-to-end